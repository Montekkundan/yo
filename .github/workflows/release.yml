name: release

on:
  push:
    tags:
    - "[0-9]+.[0-9]+.[0-9]+"

permissions:
  contents: write

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Get the release version from the tag
        id: set_version
        run: |
          echo "::set-output name=version::${GITHUB_REF#refs/tags/}"
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      - name: Show the version
        run: |
          echo "version is: $VERSION"
      - name: Check that tag version and Cargo.toml version are the same
        shell: bash
        run: |
          if ! grep -q "version = \"$VERSION\"" Cargo.toml; then
            echo "version does not match Cargo.toml" >&2
            exit 1
          fi
      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create $VERSION --verify-tag --title $VERSION

  build-release:
    name: build-release
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
        - build: linux
          os: ubuntu-latest
          rust: stable
          target: x86_64-unknown-linux-musl
        - build: macos
          os: macos-latest
          rust: stable
          target: x86_64-apple-darwin
        - build: windows
          os: windows-latest
          rust: stable
          target: x86_64-pc-windows-msvc
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        target: ${{ matrix.target }}
    - name: Install musl-tools (Linux musl only)
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: sudo apt-get update && sudo apt-get install -y musl-tools
    - name: Set OpenSSL to vendored (Linux musl only)
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: |
        echo "OPENSSL_STATIC=1" >> $GITHUB_ENV
        echo "OPENSSL_VENDORED=1" >> $GITHUB_ENV
    - name: Disable OpenSSL vendored for Windows
      if: matrix.os == 'windows-latest'
      run: echo "OPENSSL_NO_VENDOR=1" >> $GITHUB_ENV
    - name: Build release binary
      shell: bash
      run: |
        cargo build --release --target ${{ matrix.target }}
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          bin="target/${{ matrix.target }}/release/yo.exe"
          archive="yo-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.zip"
          7z a "$archive" "$bin"
        else
          bin="target/${{ matrix.target }}/release/yo"
          archive="yo-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz"
          tar czf "$archive" -C "$(dirname $bin)" "$(basename $bin)"
        fi
        echo "ARCHIVE=$archive" >> $GITHUB_ENV
    - name: Upload release archive
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: bash
      run: |
        version="${{ needs.create-release.outputs.version }}"
        gh release upload "$version" "$ARCHIVE"
